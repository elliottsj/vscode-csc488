{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "CSC488 Source Language",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#types"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "match": "(%).*$\\n?",
          "name": "comment.line.csc488",
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.csc488"
            }
          }
        }
      ]
    },
    "functions": {
      "name": "meta.function.csc488",
      "begin": "\\s*(function)\\s+([[:alpha:]_][[:alnum:]_]*)",
      "beginCaptures": {
        "1": {
          "name": "storage.type.function.csc488"
        },
        "2": {
          "name": "entity.name.function.csc488"
        }
      },
      "end": "{",
      "patterns": [
        {
          "comment": "Between the function name and the beginning of the scope, match the return type declaration",
          "begin": "(:)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.separator.annotation.result.csc488"
            }
          },
          "end": "(?={)",
          "patterns": [
            {
              "include": "#types"
            }
          ]
        },
        {
          "name": "meta.parameters.csc488",
          "comment": "Between the function name and the beginning of the scope, match the function parameters",
          "begin": "(\\()",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.parameters.begin.csc488"
            }
          },
          "end": "(\\))",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.parameters.end.csc488"
            }
          }
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.csc488",
          "match": "\\b(if|then|else|while|do|repeat|until|exit|when|return|with|newline|:|\\.\\.)\\b"
        },
        {
          "name": "keyword.operator.csc488",
          "match": "\\b(not|and|or)\\b"
        },
        {
          "name": "keyword.declaration.csc488",
          "match": "\\b(var|procedure)\\b"
        },
        {
          "name": "keyword.operator.assignment",
          "match": ":\\s*="
        },
        {
          "name": "keyword.other.io.csc488",
          "match": "\\b(read|write)\\b"
        },
        {
          "name": "constant.language.boolean.csc488",
          "match": "\\b(true|false)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.csc488",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.csc488",
          "match": "\\\\."
        }
      ]
    },
    "types": {
      "name": "support.type.csc488",
      "match": "\\b(Integer|Boolean)\\b"
    }
  },
  "scopeName": "source.csc488"
}
